generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model project {
  id         Int     @id @default(autoincrement())
  project_id String  @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String? @default("") @db.VarChar
  domain     String? @unique @default("") @db.VarChar
  members    Json?
  owner      String? @default(dbgenerated("auth.uid()")) @db.Uuid
  type       String? @default("") @db.VarChar
  valid      Boolean @default(false)
  page_views page_views[]
}

model browsers {
  id         Int          @id @default(autoincrement())
  name       String       @unique @db.VarChar(100)
  page_views page_views[]
}

model countries {
  id         Int          @id @default(autoincrement())
  name       String       @unique @db.VarChar(100)
  page_views page_views[]
}

model operating_systems {
  id         Int          @id @default(autoincrement())
  name       String       @unique @db.VarChar(100)
  page_views page_views[]
}

model page_views {
  id                Int                @id @default(autoincrement())
  page              String
  referrer          String?
  country_id        Int?
  os_id             Int?
  browser_id        Int?
  view_time         DateTime?          @default(now()) @db.Timestamp(6)
  visitor_id        Int?
  project_id        String?            @db.Uuid
  project           project?           @relation(fields: [project_id], references: [project_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_project_id")
  browsers          browsers?          @relation(fields: [browser_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_browser_id")
  countries         countries?         @relation(fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_country_id")
  operating_systems operating_systems? @relation(fields: [os_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_os_id")
  visitors          visitors?          @relation(fields: [visitor_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_visitor_id")
}

model visitors {
  id         Int          @id @default(autoincrement())
  visitor_id String       @unique @db.Uuid
  created_at DateTime?    @default(now()) @db.Timestamp(6)
  page_views page_views[]
}
